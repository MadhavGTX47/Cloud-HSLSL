float4 Cloud(FMaterialPixelParameters Parameters, int MaxSteps, float3 Albedo, float3 LightVec, float Tex)
{
    float3 PositionWorld = LWCToFloat(GetWorldPosition(Parameters));
    float3 Center= LWCToFloat(GetObjectWorldPosition(Parameters));

    float3 RayStep = -Parameters.CameraVector / MaxSteps;
    float3 ShadowStep = LightVec *(2. / MaxSteps);

    int3 RandPos = int3(GetPixelPosition(Parameters), View.FrameNumber);
    float3 Rand = float3(Rand3DPCG16(RandPos)) / 0x10000;
    

    float Size = 1e-3;
    float4 Color = 0;

    FPrimitiveSceneData PrimData = GetPrimitiveData(Parameters);

    // SamplerState MeshTextureSampler
    // {
    //     Filter = MIN_MAG_MIP_LINEAR;
    //     AddressU = Wrap;
    //     AddressV = Wrap;
    // };
    Size = max(Size, PrimData.ObjectBoundsX);
    Size = max(Size, PrimData.ObjectBoundsY);
    Size = max(Size, PrimData.ObjectBoundsZ);

    float3 P = (PositionWorld - Center)/Size;
    P += Rand.x * RayStep;

    for (int i = 0; i < MaxSteps && dot(P, P) < 1; ++i, P += RayStep) {

        float4 LocalColor = float4(Albedo, 1) * Tex * smoothstep(1, 0.8, dot(P, P));

        //ProcessMaterialLinearColorTextureLookup(Texture3DSample(Tex, MeshTextureSampler, P));

        if(LocalColor.a > 0){
            float3 SP = P + Rand.y * ShadowStep;
            float Shadow=0;

            for (int j = 0; j < MaxSteps && dot(SP, SP) < 1; ++j, SP += ShadowStep)
                Shadow += (1 - Shadow) * Tex* smoothstep(1, 0.8, dot(P, P));

            LocalColor.rgb *= 1- Shadow;    
        }   

        Color += (1 - Color.a) * LocalColor;
    }

    return Color;    

}


